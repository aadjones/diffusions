[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "diffusion-art"
version = "0.1.0"
authors = [
    {name = "Diffusion Art Contributors"},
]
description = "Latent space exploration toolkit for Stable Diffusion"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Graphics",
]
keywords = ["diffusion", "stable-diffusion", "latent-space", "interpolation", "ai-art"]

dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "diffusers>=0.30.0",
    "transformers>=4.30.0",
    "accelerate>=0.20.0",
    "safetensors>=0.3.0",
    "pillow>=9.0.0",
    "numpy>=1.21.0",
    "streamlit>=1.20.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]
analysis = [
    "umap-learn>=0.5.0",
    "scikit-learn>=1.1.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
]
notebooks = [
    "jupyter>=1.0.0",
    "ipywidgets>=8.0.0",
    "matplotlib>=3.5.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/user/diffusion-art"
Repository = "https://github.com/user/diffusion-art"
Issues = "https://github.com/user/diffusion-art/issues"
Documentation = "https://github.com/user/diffusion-art#readme"

[project.scripts]
diffusion-art = "diffusion_art.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Test configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--verbose",
    "--tb=short",
    "--cov=src/diffusion_art",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/diffusion_art"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

# Black formatting
[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 88
skip_gitignore = true
known_third_party = ["torch", "PIL", "numpy", "streamlit", "diffusers", "transformers"]

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "diffusers.*",
    "transformers.*",
    "accelerate.*",
    "streamlit.*",
    "umap.*",
    "sklearn.*",
]
ignore_missing_imports = true
